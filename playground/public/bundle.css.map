{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../src/App.svelte",
    "../../src/NumberAnimator.svelte",
    "../src/App.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { onMount } from 'svelte'\n  import { onDestroy } from 'svelte'\n  import NumberAnimator from './NumberAnimator.svelte'\n  export let countFrom = 0\n  export let countTo = 100\n  export let duration = 2000\n  export let unit = ''\n  export let textBefore = ''\n  export let description = ''\n  export let startHack = 0\n\n</script>\n\n<style>\n  .wrapper {\n    /* background-color: #dfded2; */\n    padding: 20px 40px 30px;\n    text-align: center;\n  }\n\n  p {\n    color: #585856;\n    margin: 0;\n    text-align: center;\n  }\n\n  .number-wrapper {\n    position: relative;\n    display: inline-block;\n    margin: 0 auto 10px;\n  }\n\n  .text-before {\n    position: absolute;\n    left: -210px;\n    top: 17px;\n    width: 200px;\n    text-align: right;\n    color: #868686;\n    font-size: 0.8em;\n  }\n\n  .unit {\n    text-align: left;\n    font-weight: bold;\n    font-size: 1.5em;\n  }\n\n</style>\n\n<div class='wrapper'>\n  <p class=\"number-wrapper\">\n    <span class='text-before'>{textBefore}</span>\n    <NumberAnimator countFrom={+countFrom} countTo={+countTo} duration={+duration} startHack={startHack} />\n    <span class=\"unit\">{unit}</span>\n  </p>\n  <p>{description}</p>\n</div>\n",
    "<script>\n  import { onMount } from 'svelte'\n  import { onDestroy } from 'svelte'\n  export let countFrom\n  export let countTo\n  export let duration\n  export let startHack\n\n  $: from = +countFrom\n  $: to = +countTo\n  $: totalTime = +duration\n  $: number = from\n\n  let observer\n  let elem\n\n  let timer\n  let frame\n  let startTime = null\n\n  function count() {\n    const time = window.performance.now()\n    const diff = time - startTime\n    let progress = diff / totalTime\n    if (progress > 1) progress = 1\n    if (progress < 1) {\n      timer = setTimeout(() => {\n        frame = requestAnimationFrame(count)\n      }, 100)\n    }\n\n    const range = to - from\n\n    number = Math.floor(from + progress * range)\n  }\n\n  function handleIntersection (entries) {\n    entries.forEach(entry => {\n      if (entry.isIntersecting && startTime === null) {\n        startHack = 1\n      }\n    })\n  }\n\n  $: if (startHack > 0) {\n    startHack = 0\n    startTime = window.performance.now()\n    count()\n  } else {\n  }\n\n  onMount(() => {\n    const options = {\n      rootMargin: '0px 0px 0px',\n      threshold: 0,\n    }\n    observer = new IntersectionObserver(handleIntersection, options)\n    observer.observe(elem)\n  });\n\n  onDestroy(() => {\n    cancelAnimationFrame(frame)\n    window.clearTimeout(timer)\n    observer.unobserve(elem)\n  })\n</script>\n\n<style>\n  strong {\n    color: #e31818;\n    font-size: 2.5em;\n  }\n</style>\n\n<strong bind:this={elem}>{number}</strong>\n",
    "<script>\n  import Hui from '../../src/App.svelte'\n  let countFrom = 0\n  let countTo = 100\n  let duration = 2000\n  let textBefore = 'bis zu'\n  let unit = '€'\n  let description = 'kostet xyz'\n  let startHack = 0\n\n  function restart () {\n    startHack += 1\n  }\n\n  $: url = `https://dj1.app.rbb-cloud.de/number-counter/#countFrom=${countFrom}&countTo=${countTo}&duration=${duration}&textBefore=${encodeURIComponent(textBefore)}&unit=${encodeURIComponent(unit)}&description=${encodeURIComponent(description)}`\n  $: iframeString = `<iframe src=\"${url}\" width=\"100%\" height=\"150px\"></iframe>`\n</script>\n\n<style>\n  label {\n    display: inline-block;\n    width: 160px;\n  }\n</style>\n\n\n<h2>Paramter</h2>\n<p>\n  <label for='countFrom'>text vor Zahl:</label>\n  <input id='countFrom' type='text' bind:value={textBefore} />\n</p>\n<p>\n  <label for='countFrom'>starte counter bei:</label>\n  <input id='countFrom' type='number' bind:value={countFrom} on:change={restart} />\n</p>\n<p>\n  <label for='countFrom'>zähle bis zu:</label>\n  <input id='countFrom' type='number' bind:value={countTo} on:change={restart} />\n</p>\n<p>\n  <label for='countFrom'>dauer:</label>\n  <input id='countFrom' type='number' bind:value={duration} on:change={restart} />\n</p>\n<p>\n  <label for='countFrom'>einheit:</label>\n  <input id='countFrom' type='text' bind:value={unit} />\n</p>\n<p>\n  <label for='countFrom'>text unter Zahl:</label>\n  <input id='countFrom' type='text' bind:value={description} />\n</p>\n\n<h2>Vorschau</h2>\n<Hui\n  countFrom={countFrom}\n  countTo={countTo}\n  duration={duration}\n  textBefore={textBefore}\n  unit={unit}\n  description={description}\n  startHack={startHack}  />\n\n<h2>Embed code</h2>\n<output>\n  <code>{iframeString}</code>\n</output>"
  ],
  "names": [],
  "mappings": "AAeE,QAAQ,cAAC,CAAC,AAER,OAAO,CAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CACvB,UAAU,CAAE,MAAM,AACpB,CAAC,AAED,CAAC,cAAC,CAAC,AACD,KAAK,CAAE,OAAO,CACd,MAAM,CAAE,CAAC,CACT,UAAU,CAAE,MAAM,AACpB,CAAC,AAED,eAAe,cAAC,CAAC,AACf,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,YAAY,CACrB,MAAM,CAAE,CAAC,CAAC,IAAI,CAAC,IAAI,AACrB,CAAC,AAED,YAAY,cAAC,CAAC,AACZ,QAAQ,CAAE,QAAQ,CAClB,IAAI,CAAE,MAAM,CACZ,GAAG,CAAE,IAAI,CACT,KAAK,CAAE,KAAK,CACZ,UAAU,CAAE,KAAK,CACjB,KAAK,CAAE,OAAO,CACd,SAAS,CAAE,KAAK,AAClB,CAAC,AAED,KAAK,cAAC,CAAC,AACL,UAAU,CAAE,IAAI,CAChB,WAAW,CAAE,IAAI,CACjB,SAAS,CAAE,KAAK,AAClB,CAAC;ACqBD,MAAM,eAAC,CAAC,AACN,KAAK,CAAE,OAAO,CACd,SAAS,CAAE,KAAK,AAClB,CAAC;ACpDD,KAAK,cAAC,CAAC,AACL,OAAO,CAAE,YAAY,CACrB,KAAK,CAAE,KAAK,AACd,CAAC"
}